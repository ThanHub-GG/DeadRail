local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local request = (syn and syn.request) or (http and http.request) or request

local searchHwidUrl = "http://api.thanhub.xyz/api/key/search-hwid"
local validateKeyUrl = "http://api.thanhub.xyz/api/key/validate"
local urlExecute = "http://api.thanhub.xyz/api/key/execute"


local success, response = pcall(function()
    return request({
        Url = urlExecute,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({
            apiKey = "poqe"
        })
    })
end)

local function searchHwid(apiKey, hwid)
	
    local success, response = pcall(function()
        return request({
            Url = searchHwidUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                apiKey = apiKey,
                hwid = hwid
            })
        })
    end)
    if not success then
        warn("Gagal menghubungi API (search HWID):", response)
        LocalPlayer:Kick("Tidak dapat terhubung ke server validasi.")
        return false
    end
    local status, data = pcall(function()
        return HttpService:JSONDecode(response.Body)
    end)
    if not status then
        warn("Gagal parsing response:", data)
        LocalPlayer:Kick("Kesalahan dalam memproses data validasi.")
        return false
    end
    if data.error == "API key tidak ditemukan atau nonaktif" then
        warn("API key tidak valid")
        LocalPlayer:Kick("KEY Anda tidak valid.")
        return false
    end
    if data.hwid == "HWID belum terdaftar" then
        print("HWID belum terdaftar:", data.hwid)
        return false
    end
    if data.hwid ~= hwid then
        warn("HWID berbeda! Terdaftar:", data.hwid, " | Saat ini:", hwid)
        LocalPlayer:Kick("HWID tidak cocok. Akses ditolak.")
        return false
    end
    print("HWID terdaftar:", data.hwid)
    return true
end

local function validateKey(apiKey, hwid)
    local success, response = pcall(function()
        return request({
            Url = validateKeyUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                apiKey = apiKey,
                hwid = hwid
            })
        })
    end)
    if not success then
        warn("Gagal menghubungi API (validate Key):", response)
        return false
    end

    local status, body = pcall(function()
        return HttpService:JSONDecode(response.Body)
    end)
    if not status then
        warn("Gagal parsing response:", body)
        return false
    end
    local data = body
    if data.message == "API key valid dan HWID cocok" or data.message == "HWID ditambahkan, API key diaktifkan" then
        print("API Key valid dan HWID cocok.")
        return true
    else
        warn("Validasi gagal:", data.error or "Tidak diketahui")
        return false
    end
end

local function runScript(apiKey)
    local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
    print("HWID Anda:", hwid)
    
    if not searchHwid(apiKey, hwid) then
        if not validateKey(apiKey, hwid) then
            warn("Validasi gagal. Skrip dihentikan.")
            LocalPlayer:Kick("KEY tidak valid.")
            return false
        end
    end
    
    print("[üîí] Menjalankan skrip premium...")
    return true
end

function executeScript()
    print("[DEBUG] Mengeksekusi script...")
	request({Url = urlExecute,Method = "POST",Headers = {["Content-Type"] = "application/json"}
    })
    if not script_key then
        warn("[‚ùå] script_key tidak ditemukan! Harap masukkan API key.")
        LocalPlayer:Kick("U DOESNT HAVE ACCESS ! FUCK U")
        return
    end
	
    print("[DEBUG] API Key yang digunakan:", script_key)
    if runScript(script_key) then

		local TweenService = game:GetService("TweenService")
		local Players = game:GetService("Players")
		local Lighting = game:GetService("Lighting")

		local player = Players.LocalPlayer
		local playerGui = player:WaitForChild("PlayerGui")

		local screenGui = Instance.new("ScreenGui")
		screenGui.Name = "LoadingScreen"
		screenGui.IgnoreGuiInset = true
		screenGui.ResetOnSpawn = false
		screenGui.Parent = playerGui

		local blur = Instance.new("BlurEffect")
		blur.Name = "LoadingBlur"
		blur.Size = 0
		blur.Parent = Lighting

		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(1, 0, 1, 0)
		frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		frame.BackgroundTransparency = 0.5
		frame.Parent = screenGui

		local fullText = "THAN HUB"
		local letters = {}

		for i = 1, #fullText do
			local char = string.sub(fullText, i, i)
			local letter = Instance.new("TextLabel")
			letter.Size = UDim2.new(0, 60, 0, 80)
			letter.Position = UDim2.new(0.5, (i - (#fullText / 2)) * 75, 0.5, 0)
			letter.AnchorPoint = Vector2.new(0.5, 0.5)
			letter.BackgroundTransparency = 1
			letter.Text = char
			letter.TextColor3 = Color3.fromRGB(200, 100, 255)
			letter.TextScaled = true
			letter.Font = Enum.Font.GothamBlack
			letter.TextTransparency = 1
			letter.TextXAlignment = Enum.TextXAlignment.Center
			letter.TextYAlignment = Enum.TextYAlignment.Center
			letter.Parent = screenGui

			local gradient = Instance.new("UIGradient")
			gradient.Color = ColorSequence.new{
				ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 0, 255)),
				ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 100, 255))
			}
			gradient.Parent = letter

			table.insert(letters, letter)
		end

		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local blurTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)

		local function applyBlur(size)
			local tween = TweenService:Create(blur, blurTweenInfo, {Size = size})
			tween:Play()
			tween.Completed:Wait()
		end

		local function showTextSmooth()
			for i, letter in ipairs(letters) do
				local tween = TweenService:Create(letter, tweenInfo, {TextTransparency = 0, Position = UDim2.new(0.5, (i - (#fullText / 2)) * 100, 0.5, 0)})
				tween:Play()
				tween.Completed:Wait()
				wait(0.05)
			end
		end

		local function hideTextSmooth()
			for _, letter in ipairs(letters) do
				local tween = TweenService:Create(letter, tweenInfo, {TextTransparency = 1})
				tween:Play()
			end
			wait(0.5)
		end

		local function loadingSequence()
			applyBlur(20)
			showTextSmooth()
			wait(1.5)
			hideTextSmooth()
			
			local blurTweenOut = TweenService:Create(blur, blurTweenInfo, {Size = 0})
			blurTweenOut:Play()
			blurTweenOut.Completed:Wait()

			wait(0.3)
			screenGui:Destroy()
			blur:Destroy()
		end

		loadingSequence()

				if not _G.NatHubExecuted then
					_G.NatHubExecuted = true
					local Open = Instance.new("ScreenGui")
					local Open_2 = Instance.new("ImageButton")
					local UICorner = Instance.new("UICorner")
					local DropShadowHolder = Instance.new("Frame")
					local DropShadow = Instance.new("ImageLabel")
				
					Open.Name = "Open"
					Open.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
					Open.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
					Open.ResetOnSpawn = false
				
					Open_2.Name = "OpenButton"
					Open_2.Parent = Open
					Open_2.BackgroundTransparency = 1
					Open_2.BorderSizePixel = 0
					Open_2.Position = UDim2.new(0.15, 0, 0.515, 0)
					Open_2.Size = UDim2.new(0, 60, 0, 60)
					Open_2.Image = "rbxassetid://85779221265543" 
					Open_2.ScaleType = Enum.ScaleType.Fit
				
					UICorner.CornerRadius = UDim.new(0, 10)
					UICorner.Parent = Open_2
				
					local UIS = game:GetService("UserInputService")
					local dragging, dragInput, startPos, dragStart
				
					local function startDrag(input)
						dragging = true
						dragStart = input.Position
						startPos = Open_2.Position
				
						local connection
						connection = UIS.InputEnded:Connect(function(endInput)
							if endInput.UserInputType == Enum.UserInputType.MouseButton1 then
								dragging = false
								connection:Disconnect()
							end
						end)
					end
				
					local function updateDrag(input)
						if dragging then
							local delta = input.Position - dragStart
							Open_2.Position = UDim2.new(
								startPos.X.Scale, startPos.X.Offset + delta.X, 
								startPos.Y.Scale, startPos.Y.Offset + delta.Y
							)
						end
					end
				
					Open_2.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or 
						input.UserInputType == Enum.UserInputType.Touch then
							startDrag(input)
						end
					end)
				
					Open_2.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement or 
						input.UserInputType == Enum.UserInputType.Touch then
							dragInput = input
						end
					end)
				
					UIS.InputChanged:Connect(function(input)
						if input == dragInput then
							updateDrag(input)
						end
					end)
				
					local VirtualInputManager = game:GetService("VirtualInputManager")
				
					Open_2.MouseButton1Click:Connect(function()
						local keyEnum = Enum.KeyCode.RightControl
				
						Open_2.Size = UDim2.new(0, 60, 0, 60)
						task.wait(0.1)
						Open_2.Size = UDim2.new(0, 70, 0, 70)
				
						VirtualInputManager:SendKeyEvent(true, keyEnum, false, game)
						task.wait(0.1)
						VirtualInputManager:SendKeyEvent(false, keyEnum, false, game)
					end)
				end
				
				-- // // // REPO GUI // // // --
				local than = game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI")
				local Fluent = loadstring(than)()

        				local Window = Fluent:CreateWindow({
					Title = "ThanHub [ Premium Script ]",
					Icon = "rbxassetid://131711698212719",
					Author = "Dead Rails Script | discord.gg/thanhub",
					Folder = "ThanHub",
					Size = UDim2.fromOffset(400, 250),
					Transparent = true,
					Theme = "Dark",
					SideBarWidth = 170,
					HasOutline = true
				})


		-- // // // Tabs Configuration // // // --
		local __data_tabs = {
			{Title = "Main", Icon = "gamepad-2"},
			{Title = "Misc", Icon = "settings-2"},
            {Title = "Shop", Icon = "shopping-cart"},
		}

        local Tabs = {}
		for _, v in ipairs(__data_tabs) do
			Tabs[v.Title] = Window:Tab(v)
		end

		Window:SelectTab(1)

		-- // // // Services // // // --
		local Players = game:GetService("Players")
		local TweenService = game:GetService("TweenService")
		local ReplicatedStorage = game:GetService("ReplicatedStorage")
		local RunService = game:GetService("RunService")

		local lp = Players.LocalPlayer
		local LocalPlayer = Players.LocalPlayer
		local character = lp.Character or lp.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")
		local rootPart = character:WaitForChild("HumanoidRootPart")

    if game.PlaceId == 116495829188952 then
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local selectedTrain = "golden"

    Tabs["Shop"]:Section({Title = "Train"})
    Tabs["Shop"]:Dropdown({
        Title = "Select Train Type",
        Values = { "golden", "armored", "cattle" },
        Value = "golden",
        Callback = function(option)
            selectedTrain = option
            print("Selected train: " .. selectedTrain)
        end
    })

    Tabs["Shop"]:Button({
        Title = "Buy Train",
        Callback = function()
            if selectedTrain == "golden" or selectedTrain == "armored" then
                local args = { selectedTrain }
                ReplicatedStorage
                    :WaitForChild("Shared")
                    :WaitForChild("Network")
                    :WaitForChild("RemoteEvent")
                    :WaitForChild("BuyTrain")
                    :FireServer(unpack(args))
                print("Train bought: " .. selectedTrain)
            else
                warn("You cannot buy this train type.")
            end
        end
    })

    local classList = {
        "Alamo", "Arsonist", "Conductor", "Doctor", "Eggslinger", "HighRoller",
        "Horse", "Ironclad", "Miner", "Musician", "Necromancer", "None",
        "Packmaster", "Priest", "Survivalist", "Vampire", "Werewolf", "Zombie"
    }

    local selectedClass = "Miner"
    Tabs["Shop"]:Section({Title = "Class"})
    Tabs["Shop"]:Dropdown({
        Title = "Select Class",
        Values = classList,
        Value = selectedClass,
        Callback = function(option)
            selectedClass = option
            print("Selected class: " .. selectedClass)
        end
    })

    Tabs["Shop"]:Button({
        Title = "Buy Class",
        Callback = function()
            if table.find(classList, selectedClass) then
                local args = { selectedClass }
                ReplicatedStorage
                    :WaitForChild("Shared")
                    :WaitForChild("Network")
                    :WaitForChild("RemoteEvent")
                    :WaitForChild("BuyClass")
                    :FireServer(unpack(args))
                print("Class bought: " .. selectedClass)
            else
                warn("You cannot buy this class.")
            end
        end
    })

    local selectedEquipClass = "Miner"
    Tabs["Shop"]:Section({Title = "Equip Class"})

    Tabs["Shop"]:Dropdown({
        Title = "Equip Class",
        Values = classList,
        Value = selectedEquipClass,
        Callback = function(option)
            selectedEquipClass = option
            print("Selected class to equip: " .. selectedEquipClass)
        end
    })

    Tabs["Shop"]:Button({
        Title = "Equip Class",
        Callback = function()
            if table.find(classList, selectedEquipClass) then
                local args = { selectedEquipClass }
                ReplicatedStorage
                    :WaitForChild("Shared")
                    :WaitForChild("Network")
                    :WaitForChild("RemoteEvent")
                    :WaitForChild("EquipClass")
                    :FireServer(unpack(args))
                print("Class equipped: " .. selectedEquipClass)
            else
                warn("You cannot equip this class.")
            end
        end
    })
end


		local teslaLab = workspace.TeslaLab
		local runtimeItems = workspace:WaitForChild("RuntimeItems")
		local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

		local Workspace = game:GetService("Workspace")
		local CoreGui = game:GetService("CoreGui")

		local localPlayer = Players.LocalPlayer
		local hrp = character:WaitForChild("HumanoidRootPart")

		-- Variabel untuk ESP state
		local espEnabled = false
		local espObjects = {}
		local distanceUpdater = nil

		local function getModelCenter(model)
			if not model.PrimaryPart then
				model:MakeJoints()
				model.PrimaryPart = model:FindFirstChildWhichIsA("BasePart")
			end
			if model.PrimaryPart then
				return model.PrimaryPart.Position
			else
				local cf, _ = model:GetBoundingBox()
				return cf.Position
			end
		end

		local function createESP(model)
			local esp = Instance.new("BillboardGui")
			esp.Adornee = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
			esp.Parent = CoreGui
			esp.Size = UDim2.new(0, 200, 0, 50)
			esp.StudsOffset = Vector3.new(0, 5, 0)
			esp.AlwaysOnTop = true
			esp.Name = "TrainESP"

			local label = Instance.new("TextLabel")
			label.Parent = esp
			label.Size = UDim2.new(1, 0, 1, 0)
			label.BackgroundTransparency = 1
			label.TextColor3 = Color3.fromRGB(255, 0, 0)
			label.TextStrokeTransparency = 0.8
			label.TextSize = 24
			label.Text = "Train"

			table.insert(espObjects, esp)

			if distanceUpdater then distanceUpdater:Disconnect() end
			distanceUpdater = RunService.RenderStepped:Connect(function()
				if model and model.Parent and hrp then
					local center = getModelCenter(model)
					local distance = (hrp.Position - center).Magnitude
					label.Text = string.format("Train [%.1f studs]", distance)
				end
			end)
		end

		local function enableESP()
			local train = Workspace:FindFirstChild("Train")
			if train then
				createESP(train)
			else
				warn("Train not found in Workspace.")
			end

			Workspace.ChildAdded:Connect(function(child)
				if child.Name == "Train" then
					createESP(child)
				end
			end)
		end

		local function disableESP()
			for _, esp in ipairs(espObjects) do
				esp:Destroy()
			end
			espObjects = {}
			if distanceUpdater then
				distanceUpdater:Disconnect()
				distanceUpdater = nil
			end
		end

		function HopToServer()
					local placeId = game.PlaceId
					local visitedServers = {}
					local nextCursor = ""
					local currentHour = os.date("!*t").hour
				
					function FindNewServer()
						local serverList
						if nextCursor == "" then
							serverList = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"))
						else
							serverList = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. nextCursor))
						end
				
						if serverList.nextPageCursor then
							nextCursor = serverList.nextPageCursor
						end
				
						for _, server in pairs(serverList.data) do
							local canJoin = true
							local serverId = tostring(server.id)
				
							if server.maxPlayers > server.playing then
								for _, visited in pairs(visitedServers) do
									if serverId == tostring(visited) then
										canJoin = false
									end
								end
				
								if canJoin then
									table.insert(visitedServers, serverId)
									wait()
									pcall(function()
										game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, serverId, game.Players.LocalPlayer)
									end)
									wait()
								end
							end
						end
					end
				
					function TryFindServer()
						while wait() do
							pcall(function()
								FindNewServer()
								if nextCursor ~= "" then
									FindNewServer()
								end
							end)
						end
					end
				
					TryFindServer()
				end

		-- Screen Auto Farm
		local function FarmScreen(title)
			local self = {
				Title = title
			}
			function self:Show()
				local BlurBS = game:GetService("CoreGui"):FindFirstChild("BlackScreen")
				local BlurBE = game:GetService("Lighting"):FindFirstChild("BlackBlurEffect")
				if BlurBS then return BlurBS:Destroy() end
				if BlueBE then return BlueBE:Destroy() end
				local BlackScreen = Instance.new("ScreenGui")
				local Title = Instance.new("TextLabel")
				local Desc = Instance.new("TextLabel")
				local UIGradient = Instance.new("UIGradient")
				local BlurScreen = Instance.new("Frame")
				local BlackBlurEffect = Instance.new("BlurEffect")

				BlackBlurEffect.Name = "BlackBlurEffect"
				BlackBlurEffect.Parent = game:GetService("Lighting")
				
				BlackScreen.Name = "BlackScreen"
				BlackScreen.Parent = game:GetService("CoreGui")
				BlackScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
				BlackScreen.IgnoreGuiInset = true
				
				Title.Name = "Title"
				Title.Parent = BlackScreen
				Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Title.BackgroundTransparency = 1.000
				Title.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Title.BorderSizePixel = 0
				Title.LayoutOrder = 9999
				Title.Position = UDim2.new(0.5, -100, 0.5, -25)
				Title.Size = UDim2.new(0, 200, 0, 50)
				Title.ZIndex = 999
				Title.Font = Enum.Font.GothamBold
				Title.RichText = true
				Title.Text = "<font color=\"#19a7ff\">".. self.Title .. "</font> is working, do not touch anything"
				Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				Title.TextSize = 28.000
				
				Desc.Name = "Desc"
				Desc.Parent = BlackScreen
				Desc.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Desc.BackgroundTransparency = 1.000
				Desc.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Desc.BorderSizePixel = 0
				Desc.LayoutOrder = 9999
				Desc.Position = UDim2.new(0.5, -100, 0.5, 0)
				Desc.Size = UDim2.new(0, 200, 0, 50)
				Desc.ZIndex = 999
				Desc.Font = Enum.Font.GothamBold
				Desc.Text = "discord.gg/thanhub"
				Desc.TextColor3 = Color3.fromRGB(255, 255, 255)
				Desc.TextSize = 22.000
				
				UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.48, Color3.fromRGB(25, 167, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
				UIGradient.Parent = Desc
				
				BlurScreen.Name = "BlurScreen"
				BlurScreen.Parent = BlackScreen
				BlurScreen.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				BlurScreen.BackgroundTransparency = 0.150
				BlurScreen.BorderColor3 = Color3.fromRGB(0, 0, 0)
				BlurScreen.BorderSizePixel = 0
				BlurScreen.Size = UDim2.new(1, 0, 1, 0)
				self.BlackScreen = BlackScreen
				self.BlackBlurEffect = BlackBlurEffect
			end
			function self:Hide()
				if self.BlackScreen then
					self.BlackScreen:Destroy()
					self.BlackBlurEffect:Destroy()
				end
			end
			function self:Countdown(tit, dur)
				self.CountdownEnd = false
				local Timer = Instance.new("TextLabel")
				local Title = tit or "Countdown"
				Timer.Name = "Timer"
				Timer.Parent = self.BlackScreen
				Timer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				Timer.BackgroundTransparency = 1.000
				Timer.BorderColor3 = Color3.fromRGB(0, 0, 0)
				Timer.BorderSizePixel = 0
				Timer.LayoutOrder = 9999
				Timer.Position = UDim2.new(0.5, -100, 0.5, 25)
				Timer.Size = UDim2.new(0, 200, 0, 50)
				Timer.ZIndex = 999
				Timer.Font = Enum.Font.GothamBold
				Timer.Text = "Started ".. Title
				Timer.TextColor3 = Color3.fromRGB(255, 255, 255)
				Timer.TextSize = 22.000

				local UIGradient = Instance.new("UIGradient")

				UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.48, Color3.fromRGB(25, 167, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))}
				UIGradient.Parent = Timer

				coroutine.wrap(function()
					for i = dur, 0, -1 do
						local menit = math.floor(i / 60)
						local detik = i % 60
						Timer.Text = string.format("%s: %02d:%02d", Title, menit, detik)
						task.wait(1)
					end
					self.CountdownEnd = true
					Timer:Destroy()
				end)()
			end
			return self
		end

		-- // // // GUI Data Store // // // --
		local __var = {
			than = than,
			v_bond = getgenv().auto_bond or false,
			v_set = {},
			v_toggle = {},
			v_dropdown = {},
			v_button = {},
			v_input = {}
		}
			local VIM = game:GetService("VirtualInputManager")
		-- AUTO WIN BROKKK

		local function shootRifle()
			local camera = game.Workspace.CurrentCamera
			local center = camera.ViewportSize / 2
			VIM:SendMouseButtonEvent(center.X, center.Y, 0, true, game, 0)
			task.wait()
			VIM:SendMouseButtonEvent(center.X, center.Y, 0, false, game, 0)
		end

function moveToTarget(target)

			local player = game.Players.LocalPlayer

			local character = player.Character
			if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") then return end

			local humanoid = character.Humanoid
			local hrp = character.HumanoidRootPart
			local targetPos = typeof(target) == "CFrame" and target.Position or target

			local function NoClip()
				for _, part in ipairs(character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end

			local function EnableCollide()
				for _, part in ipairs(character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = true
					end
				end
			end

			local connection = RunService.Stepped:Connect(NoClip)


			while (hrp.Position - targetPos).Magnitude > 5 do
				humanoid:MoveTo(targetPos)
				local reached = false

				local reachedConn
				reachedConn = humanoid.MoveToFinished:Connect(function(success)
					reached = success
				end)

				for i = 1, 10 do
					if reached then break end
					task.wait(0.1)
				end

				if reachedConn then reachedConn:Disconnect() end
			end

			task.wait(0.2)
			connection:Disconnect()
			EnableCollide()
		end

		local function FireProximity(proximity)
			if proximity:IsA("ProximityPrompt") and proximity.Enabled then
				proximity:InputHoldBegin()
				proximity.HoldDuration = 0
				proximity:InputHoldEnd()
			end
		end

		local function seatTeleport(targetPosition)
			local localPlayer = Players.LocalPlayer
			local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
			local humanoid = character:WaitForChild("Humanoid")
			local rootPart = character:WaitForChild("HumanoidRootPart")

			local function getNearbySeat()
				local closestSeat, minDistance = nil, math.huge
				for _, v in pairs(Workspace:GetDescendants()) do
					if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v.Occupant then
						local dist = (v.Position - targetPosition).Magnitude
						if dist < 50 and dist < minDistance then
							minDistance = dist
							closestSeat = v
						end
					end
				end
				return closestSeat
			end

			local seated, connection = false, nil
			connection = RunService.Heartbeat:Connect(function()
				if not (character and humanoid and rootPart) then return end
				local seatPart = humanoid.SeatPart
				if humanoid.Sit and seatPart and (seatPart:IsA("Seat") or seatPart:IsA("VehicleSeat")) then
					if not seated then
						seated = true
						task.delay(1, function()
							if connection.Connected then connection:Disconnect() end
						end)
					end
					return
				end

				rootPart.CFrame = CFrame.new(targetPosition)
				local nearbySeat = getNearbySeat()
				if nearbySeat then
					local pos = nearbySeat.Position
					rootPart.CFrame = CFrame.new(pos.X, pos.Y - 0.2, pos.Z)
					task.defer(function()
						pcall(function()
							nearbySeat:Sit(humanoid)
						end)
					end)
				end
			end)
		end
		local function autoDeleteMaximParts()
			local maximGun = runtimeItems:FindFirstChild("MaximGun")
			if maximGun then
				local gun = maximGun:FindFirstChild("Gun")
				local tripod = maximGun:FindFirstChild("Tripod")
				if gun then
					gun:Destroy()
				end
				if tripod then
					tripod:Destroy()
				end
			end
			local handlers = ReplicatedStorage:FindFirstChild("Client") and ReplicatedStorage.Client:FindFirstChild("Handlers")
			if handlers then
				local turretHandler = handlers:FindFirstChild("ClientTurretHandler")
				if turretHandler then
					turretHandler:Destroy()
				end
			end
		end

		runtimeItems.ChildAdded:Connect(function(child)
			if child.Name == "MaximGun" then
				task.wait(0.2)
				autoDeleteMaximParts()
			end
		end)
		autoDeleteMaximParts()


		local function aimAndShoot(Target)
			local camera = workspace.CurrentCamera
			local head = Target:FindFirstChild("Head")
			if head then
				local targetPos = head.CFrame.Position
				local camPos = camera.CFrame.Position
				local direction = (targetPos - camPos).Unit

				camera.CFrame = CFrame.lookAt(camPos, targetPos)

				shootRifle()
			end
			task.wait(0.5)
		end

		function findItem(tem)
			local character = LocalPlayer.Character
			local backpack = LocalPlayer:FindFirstChild("Backpack")
			
			if character then
				for _, tool in ipairs(character:GetChildren()) do
					if tool:IsA("Tool") and tool.Name:lower():find(tem:lower()) then
						return tool
					end
				end
			end

			if backpack then
				for _, tool in ipairs(backpack:GetChildren()) do
					if tool:IsA("Tool") and tool.Name:lower():find(tem:lower()) then
						return tool
					end
				end
			end
			return nil
		end

		function equipItem(tem)
			local item = findItem(tem)
			local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
			
			if item and humanoid and item.Parent == LocalPlayer:FindFirstChild("Backpack") then
				humanoid:EquipTool(item)
			end
		end

		local function IsFacingTarget(targetPos, threshold)
			local camera = workspace.CurrentCamera
			threshold = threshold or 0.98
			local direction = (targetPos - camera.CFrame.Position).Unit
			local dot = camera.CFrame.LookVector:Dot(direction)
			return dot >= threshold
		end

		function AutoEnd()

			Window:Close()

			Window:Close()
			local localPlayer = Players.LocalPlayer
			local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
			local humanoid = character:WaitForChild("Humanoid")
			local rootPart = character:WaitForChild("HumanoidRootPart")
			local camera = workspace.CurrentCamera
			moveToTarget(CFrame.new(141, 3, 29919))
			task.wait(0.3)
			local goldBar = workspace:FindFirstChild("RuntimeItems") and workspace.RuntimeItems:FindFirstChild("GoldBar")
			if goldBar then
				camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(0.9849429, 0, 0.17287983))
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStartDrag:FireServer(goldBar)
				task.wait(0.2)
				task.wait(0.2)
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStopDrag:FireServer(goldBar)	
			end
			task.wait(0.5)
			local collectPrompt = workspace:FindFirstChild("RuntimeItems")
				and workspace.RuntimeItems:FindFirstChild("Moneybag")
				and workspace.RuntimeItems.Moneybag:FindFirstChild("MoneyBag")
				and workspace.RuntimeItems.Moneybag.MoneyBag:FindFirstChild("CollectPrompt")
			if collectPrompt then
				repeat
					FireProximity(collectPrompt)
					task.wait()
				until not collectPrompt:IsDescendantOf(workspace.RuntimeItems)
			end
			repeat task.wait(1) until not collectPrompt:IsDescendantOf(workspace.RuntimeItems)

			task.wait(0.2)

			--Drag A Revolver

			moveToTarget(CFrame.new(146.9, 6.063720226287842, 29864.40625))
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			task.wait(0.3)
			local revolver = workspace:FindFirstChild("StartingZone")
				and workspace.StartingZone:FindFirstChild("Buildings")
				and workspace.StartingZone.Buildings:FindFirstChild("Gunsmith")
				and workspace.StartingZone.Buildings.Gunsmith:FindFirstChild("GunTable")
				and workspace.StartingZone.Buildings.Gunsmith.GunTable:FindFirstChild("ShopItems")
				and workspace.StartingZone.Buildings.Gunsmith.GunTable.ShopItems:FindFirstChild("Revolver")
			if revolver then
				camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(0.6572, -0.2316, -0.7172))
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStartDrag:FireServer(revolver)
				task.wait(0.2)
				task.wait(0.2)
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStopDrag:FireServer(revolver)
			end
			task.wait(0.2)

			moveToTarget(CFrame.new(147, 6, 29848))
			task.wait(0.3)
			local ammocount = 0
			local ammo, ammo2

			for i, v in ipairs(workspace.StartingZone.Buildings.Gunsmith.AmmoTable.ShopItems:GetChildren()) do
				if v.Name == "RevolverAmmo" then
					ammocount += 1
					if ammocount == 1 then
						ammo = v
					elseif ammocount == 2 then
						ammo2 = v
						break
					end
				end
			end

			if ammo then
				camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(0.694216787815094, -0.0006260615191422403, 0.7197656631469727))
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStartDrag:FireServer(ammo)
				task.wait(0.2)
				task.wait(0.2)
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStopDrag:FireServer(ammo)
			end
			task.wait(0.5)
			if ammo2 then
				camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(0.694216787815094, -0.0006260615191422403, 0.7197656631469727))
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStartDrag:FireServer(ammo2)
				task.wait(0.2)
				task.wait(0.2)
				game:GetService("ReplicatedStorage").Shared.Network.RemoteEvent.RequestStopDrag:FireServer(ammo2)
			end
			task.wait(0.5)
			moveToTarget(CFrame.new(144.8507537841797, 6.066963195800781, 29861.95703125))
			task.wait(0.5)
			camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(0.9996143579483032, -0.2, 0.027769558131694794))
			task.wait(0.5)
			local center = camera.ViewportSize / 2
			repeat
				VIM:SendMouseButtonEvent(center.X, center.Y, 0, true, game, 0)
				task.wait()
				VIM:SendMouseButtonEvent(center.X, center.Y, 0, false, game, 0)
			until workspace.StartingZone.Buildings.Gunsmith.Counter.Register.CartValue.Value == 0
			repeat task.wait() until workspace.RuntimeItems:FindFirstChild("Revolver")
			ReplicatedStorage.Remotes.Tool.PickUpTool:FireServer(workspace.RuntimeItems.Revolver)
			repeat task.wait() until workspace.RuntimeItems:FindFirstChild("RevolverAmmo")
			ReplicatedStorage.Shared.Network.RemotePromise.Remotes.C_ActivateObject:FireServer(workspace.RuntimeItems.RevolverAmmo)
			task.wait(0.2)
			ReplicatedStorage.Shared.Network.RemotePromise.Remotes.C_ActivateObject:FireServer(workspace.RuntimeItems.RevolverAmmo)
			seatTeleport(Vector3.new(-424.39, 27.5, -49040.54))
			repeat task.wait() until workspace.Baseplates:WaitForChild("FinalBasePlate")
			equipItem("Revolver")
			local TurretOutlaw = workspace.Baseplates:WaitForChild("FinalBasePlate"):WaitForChild("OutlawBase"):WaitForChild("Sentries"):WaitForChild("EnemyTurret"):WaitForChild("TurretOutlaw")
			aimAndShoot(TurretOutlaw)
			aimAndShoot(TurretOutlaw)
			aimAndShoot(TurretOutlaw)
			aimAndShoot(TurretOutlaw)
			task.wait(1)
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			task.wait(1)
		end

		function autoWin()
			local localPlayer = Players.LocalPlayer
			local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
			local humanoid = character:WaitForChild("Humanoid")
			local rootPart = character:WaitForChild("HumanoidRootPart")
			local camera = workspace.CurrentCamera
			local AutoEndScreen = FarmScreen("Auto Win")
			AutoEndScreen:Show()
			AutoEnd()
			AutoEndScreen:Countdown("Lower Bridge", 600)
			local OutlawFolder = workspace.Baseplates.FinalBasePlate.OutlawBase.StandaloneZombiePart.Zombies
			moveToTarget(Vector3.new(-435.56500244140625, 28.000036239624023, -49046.61328125))
			task.wait(0.2)
			for k, v in pairs(OutlawFolder:GetChildren()) do
				if v:IsA("Model") and v:FindFirstChild("Head") then
					task.spawn(function()
						while v:IsDescendantOf(OutlawFolder) do
							local head = v:FindFirstChild("Head")
							local frontPos = head.Position + (-head.CFrame.LookVector * 1) + Vector3.new(0, 2.5, 0)
							local lookAt = head.Position
							local newCFrame = CFrame.new(frontPos, lookAt)
							character:SetPrimaryPartCFrame(newCFrame)
							camera.CFrame = CFrame.lookAt(camera.CFrame.Position, head.Position)
							task.wait()
							if IsFacingTarget(head.Position) then
								task.spawn(function()
									shootRifle()
								end)
								shootRifle()
							end
						end
					end)
					repeat task.wait() until not v:IsDescendantOf(OutlawFolder)
				end
			end
			task.wait(2)
			local clip = RunService.Stepped:Connect(NoClip)
			moveToTarget(Vector3.new(-339.6719665527344, 2.999938488006592, -49041.4765625))
			repeat task.wait(1) until AutoEndScreen.CountdownEnd
			local endProximity = workspace.Baseplates.FinalBasePlate.OutlawBase.Bridge.BridgeControl.Crank.Model.Mid.EndGame
			endProximity.MaxActivationDistance = 100
			task.wait(5)
			FireProximity(endProximity)
			FireProximity(endProximity)
			FireProximity(endProximity)
			FireProximity(endProximity)
			FireProximity(endProximity)
			AutoEndScreen:Countdown("Game End", 240)
			task.wait(1)
			repeat task.wait(1) until AutoEndScreen.CountdownEnd
			AutoEndScreen:Hide()
		end

		-- AUTO BOND YAGESSSS

		local collectedBond = 0
		local BondGui = PlayerGui.BondGui
		local BondInfo = BondGui.BondInfo
		BondGui.Enabled = true
		BondGui.DisplayOrder = 99999999
		BondInfo.Position = UDim2.new(0.5, -100, 0.5, 75)
		local BoundCount = BondInfo.BondCount
		local bondCount = 0
		BoundCount.Text = tostring(bondCount)

		local farZ = math.random(38000000, 40000000)
		local targetCFrame = CFrame.new(0, 0, farZ)
		local teslaCFrame = CFrame.new(254.93801879882812, 23.309329986572266, -9058.31640625)
		local teslaCFrame1 = CFrame.new(284.7396545410156, 1.950000286102295, -9135.2431640625)
		local targetCFrame1 = CFrame.new(
			-353.424835, 2.77587342, 22068.3828,
			0.999588847, -0.0277877338, 0.00707084127,
			0.00721074268, 0.00493770838, -0.999961793,
			0.0277517606, 0.999601662, 0.00513607264
		)
		local targetPositions = {
			Town1 = Vector3.new(3000 * 1000, 0, 0),
			Town2 = Vector3.new(13000 * 1000, 0, 0),
			Town3 = Vector3.new(23000 * 1000, 0, 0),
			Town4 = Vector3.new(33000 * 1000, 0, 0), 
			Town5 = Vector3.new(43000 * 1000, 0, 0),
			Town6 = Vector3.new(53000 * 1000, 0, 0),
			Town7 = Vector3.new(63000 * 1000, 0, 0),
			Fort = Vector3.new(10000 * 1000, 0, 0),
			VampireCastle = Vector3.new(37000 * 1000, 0, 0),
			Sterling = Vector3.new(9000 * 1000, 0, 0),
		}
		local TELEPORT_STEPS = 10
		local STEP_DELAY = 0.02
		local RANDOM_OFFSET = 0.05
		local ACTIVATION_DELAY = math.random(0.3, 0.6)
		local TELEPORT_DELAY = 0.3
		local BASE_LOCATIONS = {
			CFrame.new(-669.371521, 3.61944914, 21985.8496, 0.973285735, 0.00526623288, -0.229536727, -0.00536597101, 0.999985576, 0.000189658953, 0.229534402, 0.00104709482, 0.97329998),
			CFrame.new(-509.890869, 2.78906393, 14211.4756, 0.201247931, -0.978486776, -0.0454183817, -0.00121250749, 0.0461181998, -0.998935163, 0.979539514, 0.201088607, 0.0080947876),
			CFrame.new(-901.578552, 1.52343822, 8542.17578, 0.97795552, 0.208813339, 5.90831041e-06, -5.90831041e-06, 5.59687614e-05, -1, -0.208813339, 0.977955461, 5.59687614e-05),
			CFrame.new(217.1418, 2.79384279, 5968.22705, -0.0805021524, 0.996251702, -0.0316540897, -0.000644505024, 0.0317051411, 0.999497056, 0.996754169, 0.0804821253, -0.00191020966),
			CFrame.new(-848.629761, 2.77043128, -1786.52637, 0.999854684, -0.00651498139, -0.0157529972, 0.0159807578, 0.0365254879, 0.999204934, -0.00593441539, -0.999311507, 0.0366243124),
			CFrame.new(272.843872, 15.8046951, -9124.20703, 0.298157215, 0.954510689, -0.00340563059, -0.0102901757, 0.00678193569, 0.999924064, 0.954461336, -0.298099518, 0.0118441582),
			CFrame.new(43.5781441, 2.76562643, -17592.8359, -0.868427515, -0.495799661, -0.0040460974, 0.000673666596, 0.00698053837, -0.999975383, 0.495815694, -0.868408859, -0.00572812557),
			CFrame.new(-958.210938, 2.79305172, -25400.6934, 0.0248754025, 0.999567091, -0.0157108009, 0.00368922949, 0.0156238079, 0.999871135, 0.999683738, -0.0249301493, -0.00329899788),
			CFrame.new(-338.450592, 2.77439308, -33494.2188, -0.00442051888, -0.999705553, -0.0238558352, 0.00105819106, 0.0238513947, -0.999714911, 0.999989629, -0.00444453955, 0.000952482224),
			CFrame.new(-177.150986, 2.80056357, -41599.1562, 0.809373975, -0.587087452, 0.0155611336, 0.00649988651, -0.0175400972, -0.99982506, 0.587257624, 0.809333503, -0.0103805065),
			CFrame.new(-460.031464, 0.656250298, -48808.7422, 0.00145846605, -0.999971509, -0.0074146986, -1.43349171e-05, 0.0074146986, -0.999972582, 0.999998927, 0.00145855546, -3.57627869e-06),
		}

		-- // // // Utility Namespace // // // --
		local than = {
			ThanPrint = print,
			Toggle = function(title, content, value, callback ) return { Title = title, Desc = content, Value = value, Callback = callback} end,
			ThanSetValue = function(value) return { Value = value } end,
			ThanDef = function(default) return { Default = default } end
		}

		-- // // // Local Script // // // --
		local function addNoise(cf)
			local noise = CFrame.new(
				math.random(-RANDOM_OFFSET, RANDOM_OFFSET),
				math.random(-RANDOM_OFFSET, RANDOM_OFFSET),
				math.random(-RANDOM_OFFSET, RANDOM_OFFSET)
			)
			return cf * noise
		end

		function sitOnChair(seat)
			if not humanoid or not rootPart then return end
			rootPart.CFrame = seat.CFrame * CFrame.new(0, 2.2, 0)
			humanoid.PlatformStand = true
			humanoid.AutoRotate = false
			rootPart.Velocity = Vector3.zero
			rootPart.RotVelocity = Vector3.zero

			seat:Sit(humanoid)
			task.wait(0.1)
			humanoid:ChangeState(Enum.HumanoidStateType.Seated)
		end

		local function incrementBondCount()
			bondCount += 1
			BoundCount.Text = "+" .. tostring(bondCount)
		end
		runtimeItems.ChildAdded:Connect(function(bond)
			if bond.Name == "Bond" then
				incrementBondCount()
			end
		end)

		local function teleportBonds(folder)
			local function processBond(bond)
				if bond and bond:FindFirstChild("Part") then
					local bondPart = bond.Part
					if bondPart:IsA("BasePart") then
						local bondCFrame = bondPart.CFrame * CFrame.new(0, 3, 0)
						rootPart.CFrame = bondCFrame
						task.wait(0.05)
						local activateRemote = ReplicatedStorage.Shared.Network.RemotePromise.Remotes.C_ActivateObject
						pcall(function()
							activateRemote:FireServer(bond)
						end)
						than.ThanPrint("Activated Bond: " .. bond:GetFullName())
					end
				end
			end

			local function processFolder(folder)
				for _, obj in ipairs(folder:GetChildren()) do
					if obj:IsA("Folder") then
						processFolder(obj)
					elseif obj.Name == "Bond" then
						processBond(obj)
					end
				end
			end

			local remainingBonds = true
			while remainingBonds do
				remainingBonds = false
				processFolder(folder)
				for _, obj in ipairs(folder:GetChildren()) do
					if obj.Name == "Bond" then
						remainingBonds = true
						break
					end
				end
				if remainingBonds then
					task.wait(0.1)
				end
			end

			than.ThanPrint("All bonds have been processed.")
		end

		local function teleportToBases()
			for _, baseCFrame in ipairs(BASE_LOCATIONS) do
				rootPart.CFrame = baseCFrame
				than.ThanPrint("Teleported to base:", baseCFrame.Position)
				task.wait(TELEPORT_DELAY)
				teleportBonds(runtimeItems)
				than.ThanPrint("Finished processing bonds at this base")
				task.wait(0.01)
			end

			than.ThanPrint("Completed all base teleportations")
			
			rootPart.CFrame = CFrame.new(0, -5000, 0)
			than.ThanPrint("Character dropped to the void for auto-death")
		end

		local function ensureChairMovement(seat)
			local initialChairPos = seat.Position
			local attempts = 0
			local maxAttempts = 1
			local chairMoved = false
			while not chairMoved and attempts < maxAttempts do
				attempts = attempts + 1
				local randomOffset = CFrame.new(
					math.random(-10, 10),
					math.random(5, 15),
					math.random(-10, 10)
				)
				rootPart.CFrame = targetCFrame1
				task.wait(4.5)
				local newChairPos = seat.Position
				chairMoved = (newChairPos - initialChairPos).Magnitude > 0.1
				if chairMoved then
					than.ThanPrint("Chair successfully moved after attempt", attempts)
					return true
				else
					than.ThanPrint("Chair didn't move, attempt", attempts)
				end
			end
			
			return false
		end
		local autoBondScreen = FarmScreen("Auto Bond")

		local function farm()
			if not character then return end
			local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
			local targetCFrame = addNoise(teslaCFrame)
			autoBondScreen:Show()
			humanoidRootPart.CFrame = targetCFrame
			local maxRetries = 20
			local retries = 0
			local Chair
			repeat
				Chair = runtimeItems:FindFirstChild("MaximGun")
				if not Chair then
					than.ThanPrint("Chair not found, retrying in 0.1s... [" .. (retries + 1) .. "/" .. maxRetries .. "]")
					task.wait(0.1)
					retries += 1
				end
			until Chair or retries >= maxRetries
			if not Chair then
				warn("MaximGun not found after " .. maxRetries .. " attempts.")
				return farm()
			end

			than.ThanPrint("Chair found!")
			local seat = Chair:FindFirstChildOfClass("Seat") or Chair:FindFirstChildOfClass("VehicleSeat")
			if not seat then
				than.ThanPrint("No seat found in the chair!")
				task.wait(0.01)
				return farm()
			end
			sitOnChair(seat)
			task.wait(1.3)
			if humanoid.Sit then
				than.ThanPrint("Seated on chair, checking if chair can move")
				local currentSeat
				for _, obj in pairs(humanoid.SeatPart.Parent:GetDescendants()) do
					if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
						if obj.Occupant == humanoid then
							currentSeat = obj
							break
						end
					end
				end

				if ensureChairMovement(currentSeat) then
					than.ThanPrint("Valid - Chair position changed")
					teleportToBases()
					teleportToBases()
				else
					than.ThanPrint("Couldn't make current chair move, trying different chair")
					task.wait(1)
					local chairs = {}
					for _, item in pairs(runtimeItems:GetChildren()) do
						if item.Name == "MaximGun" and item ~= (currentSeat and currentSeat.Parent) then
							local otherSeat = item:FindFirstChildOfClass("VehicleSeat")
							if otherSeat then
								table.insert(chairs, otherSeat)
							end
						end
					end

					if #chairs > 0 then
						humanoid.Jump = true
						task.wait(1)
						humanoid.Jump = false
						humanoid.PlatformStand = true
						local newSeat = chairs[1]
						than.ThanPrint("Trying chair 1 of", #chairs)
						if humanoid.Sit and ensureChairMovement(newSeat) then
							than.ThanPrint("Valid - First chair successfully moved")
							teleportToBases()
							teleportToBases()
						else
							than.ThanPrint("No movable chair found, retrying...")
							return farm()
						end
					end
					return farm()
				end
			else
				than.ThanPrint("Not seated on a chair, retrying...")
				return farm()
			end
		end
		-- // // // Info Tab Setup // // // --

		Tabs["Main"]:Section({Title = "Auto Farm"})

		Tabs["Main"]:Paragraph({
			Title = "Warning",
			Desc = "If Auto Bond not work, turn off and turn on again pls",
			Image = "triangle-alert",
			Color = "Orange",
			-- Buttons = {
			--     {
			--         Title = "Ok!",
			--     },
			--     {
			--         Title = "Ok!",
			--     }
			-- }
		})

		Tabs["Main"]:Toggle(than.Toggle("Auto Bond", "Automatically Collect Bond", __var.v_bond, function(state)
			__var.v_bond = state
			if state then
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EndDecision"):FireServer(false)
				farm()
				autoBondScreen:Hide()
				LocalPlayer.Character:WaitForChild("Humanoid").Health = 0
			else
				than.ThanPrint("Auto bond mati")
			end
		end))

		Tabs["Main"]:Toggle({
			Title = "Auto Win",
			Value = false,
			Callback = function(state)
				if state then
					task.spawn(function()
						autoWin()
					end)
				end
			end
		})

		Tabs["Main"]:Toggle({
			Title = "ESP Train",
			Value = espEnabled,
			Callback = function(state)
				espEnabled = state
				if espEnabled then
					enableESP()
				else
					disableESP()
				end
			end
		})

		Tabs["Misc"]:Button({
					Title = "Boost FPS !",
					Callback = function()
						local ToDisable = {
							Textures = true,
							VisualEffects = true,
							Parts = true,
							Particles = true,
							Sky = true
						}
						local ToEnable = {
							FullBright = false
							}
				
						local Stuff = {}
				
						for _, v in next, game:GetDescendants() do
							if ToDisable.Parts then
								if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
									v.Material = Enum.Material.SmoothPlastic
									table.insert(Stuff, 1, v)
								end
							end
				
							if ToDisable.Particles then
								if
									v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or
									v:IsA("Fire")
								then
									v.Enabled = false
									table.insert(Stuff, 1, v)
								end
							end
							if ToDisable.VisualEffects then
								if
									v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or
									v:IsA("SunRaysEffect")
								then
									v.Enabled = false
									table.insert(Stuff, 1, v)
								end
							end
							if ToDisable.Textures then
									if v:IsA("Decal") or v:IsA("Texture") then
										v.Texture = ""
										table.insert(Stuff, 1, v)
									end
								end
				
								if ToDisable.Sky then
									if v:IsA("Sky") then
										v.Parent = nil
										table.insert(Stuff, 1, v)
									end
								end
							end
				
							game:GetService("TestService"):Message(
								"Effects Disabler Script : Successfully disabled " .. #Stuff .. " assets / effects. Settings :"
							)
							for i, v in next, ToDisable do
								print(tostring(i) .. ": " .. tostring(v))
							end
							if ToEnable.FullBright then
								local Lighting = game:GetService("Lighting")
				
								Lighting.FogColor = Color3.fromRGB(255, 255, 255)
								Lighting.FogEnd = math.huge
								Lighting.FogStart = math.huge
								Lighting.Ambient = Color3.fromRGB(255, 255, 255)
								Lighting.Brightness = 5
								Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
								Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
								Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
								Lighting.Outlines = true
							end
						end
					}
				)

				Tabs["Misc"]:Button({
					Title = "Infinite Yield",
					Content = "Best script for all games",
					Callback = function()
						local inft = game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source")
						local yield = loadstring(inft)()
					end
				})

				local Server = Tabs["Misc"]:Section({Title = "Server"})
				
				Tabs["Misc"]:Button({
					Title = "Low-Server",
					Content = "Join a old server low player in the same game.",
					Callback = function()
						HopToServer()
					end
				})
				
				Tabs["Misc"]:Button({
					Title = "Rejoin Server",
					Content = "",
					Callback = function()
						game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
					end
				})
				
				Tabs["Misc"]:Toggle({
					Title = "Auto-Rejoin", 
					Value = true,
					Callback = function (enabled)
						if enabled then
							_G.AutoRejoin = true
							getgenv().RejoinConnection = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
								if child.Name == "ErrorPrompt" and child:FindFirstChild("MessageArea") and child.MessageArea:FindFirstChild("ErrorFrame") then
									game:GetService("TeleportService"):Teleport(game.PlaceId)
								end
							end)
						else
							_G.AutoRejoin = false
							if getgenv().RejoinConnection then
								getgenv().RejoinConnection:Disconnect()
								getgenv().RejoinConnection = nil
							end
						end
					end
				})

				local function autoExecute()
					if disable_auto_execute then return end
					
					local success, err = pcall(function()
						local queueonteleport = queueonteleport or queue_on_teleport or 
											(syn and syn.queue_on_teleport) or 
											(fluxus and fluxus.queue_on_teleport)
						
						if not queueonteleport then
							warn("Executor tidak mendukung queue_on_teleport.")
							return
						end
						
						local currentAutoBond = getgenv().auto_bond
						local currentScriptKey = script_key or ""
						local scriptToExecute = ""
						if currentScriptKey ~= "" then
							local scriptUrl = "https://raw.githubusercontent.com/ThanHub-GG/DeadRail/refs/heads/main/premium"
							scriptToExecute = string.format([[
								if getgenv().auto_bond == nil then
									getgenv().auto_bond = %s
								end
								if %q ~= "" then
									script_key = %q
								end
								loadstring(game:HttpGet(%q))()
							]],
							tostring(currentAutoBond or false),
							currentScriptKey, currentScriptKey,
							scriptUrl)
						end
						queueonteleport(scriptToExecute)
					end)
					
					if not success then
						warn("Auto execute error: " .. tostring(err))
					end
				end

		local function setupCharacter(character)
			if not character then return end
			
			local humanoid = character:WaitForChild("Humanoid", 5)
			if humanoid then
				humanoid.Died:Connect(function()
					print("Karakter mati, memicu auto-execute")
					autoExecute()
				end)
			end
		end
		LocalPlayer.CharacterAdded:Connect(function(character)
			setupCharacter(character)
		end)

		LocalPlayer.CharacterRemoving:Connect(function()
			autoExecute()
		end)

		if LocalPlayer.Character then
			setupCharacter(LocalPlayer.Character)
		end
		autoExecute()
    end
end
executeScript()
